#include "common.h"

void write_buffer(bin_t* buffer, const uint start, const byte* data, const uint size) {
    if (start + size > buffer->size) {
        if (!reallocate_buffer(&input, start + size - buffer->size, "firmware patches")) exit(7);
    }

    memcpy(&buffer->data[start], data, size);
}

template <typename T>
struct map_element {
    const uint address;
    const T patch_value;

    void patch(bin_t* buffer) const {
        patch(buffer, patch_value);
    }

    void patch(bin_t* buffer, const T value) const {
        patch(buffer, 0, value);
    }

    void patch(bin_t* buffer, const uint start, const T value) const {
        write_buffer(buffer, address + start, (byte*)&value, sizeof(T));
    }
};

template <typename T>
struct map_element<T*> {
    const uint address;
    const T* patch_value;
    const uint patch_count;

    void patch(bin_t* buffer) const {
        patch(buffer, patch_value, patch_count);
    }

    void patch(bin_t* buffer, const uint start) const {
        patch(buffer, start, patch_value, patch_count);
    }

    void patch(bin_t* buffer, const T* value, const uint count) const {
        patch(buffer, 0, value, count);
    }

    void patch(bin_t* buffer, const uint start, const T* value, const uint count) const {
        write_buffer(buffer, address + start, (byte*)value, count * sizeof(T));
    }
};

byte palette_data[512];

const std::vector<const map_element<byte*>> palette_maps = {
    {0xCDB4,  palette_data, 512},
    {0xC95C,  palette_data, 512},
    {0x5C610, palette_data, 512},
    {0x3A43,  palette_data, 384},
    {0x13D4C, palette_data, 384},
};

void verify_and_copy_palette(const byte family, byte* palette) {
    for (int i = 0; i < 384; i++) {
        if (palette[i] > 0x3F) {
            fprintf(stderr, "Invalid palette received for patching.\n");
            exit(7);
        }

        if (family == LPX_FAMILY_ID)
            palette_data[i / 3 * 4 + 2 - i % 3] = palette[i] << 2;

        else if (family == LPRGB_FAMILY_ID)
            palette_data[i] = palette[i];
    }
}

const std::vector<byte> lpx_fast_led_patch = {
    0x0B, 0x78, 0xF0, 0x2B, 0x01, 0xD0, 0x00, 0x20, 0x70, 0x47, 0xF0, 0xB5, 0x4B, 0x78, 0x5F, 0x2B,
    0x0F, 0x46, 0x01, 0xD0, 0x00, 0x20, 0xF0, 0xBD, 0x02, 0xF1, 0xFF, 0x3C, 0x8C, 0x44, 0x02, 0x37,
    0xBC, 0x45, 0x69, 0xD9, 0x62, 0x4D, 0x39, 0x78, 0x7A, 0x78, 0xB8, 0x78, 0x0B, 0x11, 0x54, 0x11,
    0x04, 0xF0, 0x02, 0x04, 0x03, 0xF0, 0x04, 0x03, 0x23, 0x43, 0xC0, 0xF3, 0x80, 0x14, 0x23, 0x43,
    0x00, 0xF0, 0xA0, 0x80, 0x01, 0xF0, 0x3F, 0x04, 0xA4, 0x04, 0x02, 0xF0, 0x3F, 0x02, 0x44, 0xEA,
    0x82, 0x24, 0x00, 0xF0, 0x3F, 0x00, 0x44, 0xEA, 0x80, 0x04, 0xFE, 0x1C, 0xDB, 0xB2, 0x5F, 0x1E,
    0xFF, 0xB2, 0x01, 0x37, 0x37, 0x44, 0x1A, 0xE0, 0xA5, 0xFB, 0x00, 0x32, 0xD3, 0x08, 0x03, 0xEB,
    0x83, 0x01, 0xC3, 0xF1, 0x09, 0x03, 0xA0, 0xEB, 0x41, 0x00, 0x03, 0xEB, 0x83, 0x03, 0x00, 0xEB,
    0x43, 0x03, 0xDB, 0xB2, 0x9B, 0x00, 0x03, 0xF1, 0x00, 0x53, 0x03, 0xF5, 0xD3, 0x42, 0xC3, 0xF8,
    0x14, 0x43, 0x13, 0x68, 0x03, 0xF0, 0xF8, 0x03, 0x13, 0x60, 0xBE, 0x42, 0x2A, 0xD0, 0x16, 0xF8,
    0x01, 0x0B, 0x58, 0xB3, 0x63, 0x28, 0xDF, 0xD9, 0x6D, 0x28, 0x45, 0xD9, 0x77, 0x28, 0xF4, 0xD8,
    0x64, 0x38, 0xC3, 0xB2, 0xA5, 0xFB, 0x03, 0x21, 0xCA, 0x08, 0x11, 0x46, 0xC1, 0xF1, 0x09, 0x01,
    0x02, 0xEB, 0x82, 0x02, 0xA3, 0xEB, 0x42, 0x02, 0x01, 0xEB, 0x81, 0x01, 0x02, 0xEB, 0x41, 0x02,
    0xD2, 0xB2, 0x92, 0x00, 0x02, 0xF1, 0x00, 0x52, 0x02, 0xF5, 0xD3, 0x41, 0xC2, 0xF8, 0x14, 0x43,
    0x0A, 0x68, 0x0A, 0x33, 0xDB, 0xB2, 0x02, 0xF0, 0xF8, 0x02, 0x59, 0x2B, 0x0A, 0x60, 0xE1, 0xD9,
    0xBE, 0x42, 0xD4, 0xD1, 0x67, 0x45, 0x96, 0xD3, 0x01, 0x20, 0xF0, 0xBD, 0xC2, 0xB2, 0xA5, 0xFB,
    0x02, 0x31, 0xCB, 0x08, 0x03, 0xEB, 0x83, 0x0E, 0xC3, 0xF1, 0x09, 0x03, 0xA2, 0xEB, 0x4E, 0x02,
    0x03, 0xEB, 0x83, 0x03, 0x02, 0xEB, 0x43, 0x03, 0xDB, 0xB2, 0x9B, 0x00, 0x03, 0xF1, 0x00, 0x53,
    0x03, 0xF5, 0xD3, 0x42, 0xC3, 0xF8, 0x14, 0x43, 0x13, 0x68, 0x01, 0x30, 0x03, 0xF0, 0xF8, 0x03,
    0x64, 0x28, 0x13, 0x60, 0xE2, 0xD1, 0xB0, 0xE7, 0x00, 0xEB, 0x80, 0x00, 0x43, 0x00, 0x19, 0x33,
    0x03, 0xF0, 0xFF, 0x03, 0xD9, 0x1D, 0xA5, 0xFB, 0x03, 0x20, 0xC2, 0x08, 0x10, 0x46, 0xC0, 0xF1,
    0x09, 0x00, 0x02, 0xEB, 0x82, 0x02, 0xA3, 0xEB, 0x42, 0x02, 0x00, 0xEB, 0x80, 0x00, 0x02, 0xEB,
    0x40, 0x02, 0xD2, 0xB2, 0x92, 0x00, 0x02, 0xF1, 0x00, 0x52, 0x02, 0xF5, 0xD3, 0x40, 0xC2, 0xF8,
    0x14, 0x43, 0x02, 0x68, 0x01, 0x33, 0xDB, 0xB2, 0x02, 0xF0, 0xF8, 0x02, 0x8B, 0x42, 0x02, 0x60,
    0xE1, 0xDD, 0x8A, 0xE7, 0x02, 0xF0, 0x3F, 0x04, 0xA4, 0x02, 0x01, 0xF0, 0x3F, 0x01, 0xFB, 0x78,
    0x44, 0xEA, 0x81, 0x44, 0x00, 0xF0, 0x3F, 0x00, 0x44, 0xEA, 0x80, 0x04, 0x3E, 0x1D, 0x00, 0x2B,
    0x7F, 0xF4, 0x5D, 0xAF, 0x37, 0x46, 0x67, 0x45, 0xFF, 0xF4, 0x3D, 0xAF, 0xA4, 0xE7, 0x00, 0xBF,
    0xCD, 0xCC, 0xCC, 0xCC
};

//const std::vector<byte> lpminimk3_programmer_patch = {

struct lpx_family_map {
    const map_element<byte*> fast_led;
    const map_element<byte> version;
    const map_element<uint> sysex_injection;
};

const std::vector<lpx_family_map> lpx_family_maps = {
    {
        {0x0, lpx_fast_led_patch.data(), lpx_fast_led_patch.size()},
        {0x1FD, 0x32}, {0xD076, 0xBD23F003}
    },
    /*{
        {0x0, lpminimk3_fast_led_patch.data(), lpminimk3_fast_led_patch.size()},
    }*/
};

void lpx_family_patch(const byte target, bool* args) {
    // Apollo Studio fast LED patch
    if (args[1]) {
        lpx_family_maps[target].fast_led.patch(&input, input.size);

        lpx_family_maps[target].version.patch(&input);
        lpx_family_maps[target].sysex_injection.patch(&input);
    }
}

void patch(const byte family, const byte target, const byte index, bool* args, byte* palette) {
    if (target == LPPROMK3_PRODUCT_ID) return;

    if (args[0]) { // Patch palette
        verify_and_copy_palette(family, palette);
        palette_maps[index].patch(&input);
    }

    if (args[1] && family == LPX_FAMILY_ID && target != LPPROMK3_PRODUCT_ID) {
        lpx_family_maps[target].fast_led.patch(&input, input.size);

        lpx_family_maps[target].version.patch(&input);
        lpx_family_maps[target].sysex_injection.patch(&input);
    }
}